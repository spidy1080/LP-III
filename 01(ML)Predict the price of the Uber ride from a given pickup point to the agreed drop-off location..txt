#ML PR : 01(Uber Dataset)
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder




data = pd.read_csv('uber.csv')

data.dropna(inplace=True)




print(data.head())
column_names = data.columns
print(column_names)


data.info()




data.drop(columns=['Unnamed: 0', 'key'], inplace=True)




data.isnull().sum()




data.dropna(inplace=True)





data['pickup_datetime'] = pd.to_datetime(data['pickup_datetime'])
data['hour'] = data['pickup_datetime'].dt.hour
data['day'] = data['pickup_datetime'].dt.day
data['month'] = data['pickup_datetime'].dt.month
data.drop(['pickup_datetime'], axis=1, inplace=True)





scaler = StandardScaler()
numerical_features = ['fare_amount', 'pickup_longitude', 'pickup_latitude',
                      'dropoff_longitude', 'dropoff_latitude', 'passenger_count']
data[numerical_features] = scaler.fit_transform(data[numerical_features])





X = data.drop('fare_amount', axis=1)
y = data['fare_amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)





import seaborn as sns
import matplotlib.pyplot as plt




sns.boxplot(x=data['fare_amount'])
plt.title('Boxplot of Fare Amount')
plt.show()




corr_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()




from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor





linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)





from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error






y_pred_linear = linear_model.predict(X_test)
r2_linear = r2_score(y_test, y_pred_linear)
rmse_linear = np.sqrt(mean_squared_error(y_test, y_pred_linear))
mae_linear = mean_absolute_error(y_test, y_pred_linear)






y_pred_rf = rf_model.predict(X_test)
r2_rf = r2_score(y_test, y_pred_rf)
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
mae_rf = mean_absolute_error(y_test, y_pred_rf)






print("Linear Regression: R2 =", r2_linear, "RMSE =", rmse_linear, "MAE =", mae_linear)
print("Random Forest: R2 =", r2_rf, "RMSE =", rmse_rf, "MAE =", mae_rf)



