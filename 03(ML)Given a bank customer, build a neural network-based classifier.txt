ML PR : 02 (ChurnModelling dataset)
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix




data = pd.read_csv('Churn_Modelling.csv')
print(data.head())




X = data.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis=1)
y = data['Exited']





le_gender = LabelEncoder()
le_geo = LabelEncoder()






X['Gender'] = le_gender.fit_transform(X['Gender'])
X['Geography'] = le_geo.fit_transform(X['Geography'])





X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)






scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)






model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Dense(units=10, activation='relu',input_shape=(X_train.shape[1],)))
model.add(tf.keras.layers.Dense(units=8, activation='relu'))
model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))  

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))







y_pred = model.predict(X_test)
y_pred = (y_pred > 0.5)  # Convert probabilities to binary output

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy*100:.2f}%')

conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', conf_matrix)
